#!/usr/bin/env perl
use strict;
use warnings;

BEGIN {
  # use RunKeeper libs
  if ( -d "/usr/local/rk/lib/perl" && !grep( m|^/usr/local/rk/lib/perl$|, @INC ) ) {
    use lib '/usr/local/rk/lib/perl';
  }

  use File::Basename;
  my( $dirname ) = File::Basename::dirname( $0 );
  if ( grep( /devops-puppet/, $dirname  ) ) {
    $dirname =~ s|^(.*?/devops-puppet)/.*$|$1/modules/runkeeper/files/filesys/lib/perl|;
    unshift( @INC, $dirname );
  }
  
  if ( !grep( /^\.$/, @INC ) && -d './RK' ) {
    use lib '.';
  }
}

use Cache::FileCache;
use Env qw(HOME);
use File::Slurp;
use File::Spec;
use Getopt::Complete;
use JSON;
use LWP::UserAgent;
use String::ShellQuote;
use RK::Output qw( ClearTerm EndProgress StatusMesg horizontalRule );
use URI;

use Readonly;
use Smart::Comments;

require Getopt::Complete;

use version; our $VERSION = qv("1.4.1");

# defaults
our $CACHE_NAMESPACE = 'patchHostgroup';
our $CACHE_ROOT      = File::Spec->catdir( $HOME, '.' . $CACHE_NAMESPACE );
our $CACHE_EXPIRY    = '1month';
our $HOSTGROUPS_URL  = 'http://puppet.runkeeper.com/statics/hosts_and_hostgroups.json';
our $HOSTGROUPS_FILE = File::Spec->catfile( $HOME, '.RK', 'hosts_and_hostgroups.json' );
our $SSH_CMD         = 'ssh -t';

# determine program name
my( $progvol, $progpath, $progname ) = File::Spec->splitpath( $0 );

sub usage() {
    print <<"USAGE";
Usage: $progname (--verbose|-v) <hostgroup> (<hostgroup>...)
       $progname (--list|-l) (--script|-s)
       $progname (--flush|-f)
       $progname (--noop|--dry-run|-n)
       $progname (--package|-p)
       $progname (--version|-V)
       $progname --complete >> ~/.profile && . ~/.profile
USAGE
    exit 1;
}

# SUBS

sub generateCompletion() {
  my $snippet = <<'BASH';
function _getopt_complete () {
  COMPREPLY=($( COMP_CWORD=$COMP_CWORD perl `which ${COMP_WORDS[0]}` ${COMP_WORDS[@]:0} ));
}
BASH
  $snippet .= "complete -F _getopt_complete $progname";
  print "$snippet\n";
}

sub getHostgroups {
  my( %params ) = ( @_ );
  my( $cache, $flush, $raw_url, $fallback ) = ( $params{cache}, $params{flush}, $params{remote}, $params{fallback} );
  my( $raw_json, $cooked_json );

  unless ( defined( $raw_url ) ) {
    $raw_url = $HOSTGROUPS_URL;
  }

  my $cooked_url = URI->new( $raw_url );
  defined( $cooked_url ) || die( "'$raw_url' doesn't look like a valid URL.\n" );

  # get JSON from the cache
  if ( defined( $cache ) ) {
    $raw_json = $cache->get( $cooked_url );
  }

  #
  # when at home: d/l the file on the puppet master and then scp it to your home dir
  #
  #open ( JSON, "/Users/mcox/hosts_and_hostgroups.json" );
  #$raw_json = <JSON>;
  #close( JSON );
  # cache the JSON
  #$cache->set( $cooked_url, $raw_json );
  
  unless ( defined( $raw_json ) ) {
    # download the JSON
    my $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    $ua->env_proxy;

    my $response = $ua->get($cooked_url);

    if ( $response->is_success ) {
      $raw_json = $response->decoded_content;
    }
    else {
      warn( "Unable to query hostgroups: " . $response->status_line . "\n" );

      # try the fallback
      if ( -r $fallback ) {
        $raw_json = read_file( $fallback );
      }
      else {
        die( "Unable to read fallback: $fallback\n" );
      }
    }

    # cache the JSON
    if ( defined( $cache ) ) {
      $cache->set( $cooked_url, $raw_json );
    }
  }

  # parse the JSON
  $cooked_json = decode_json( $raw_json );

  my $hostgroups;

  while ( my $host = shift( @{$cooked_json} ) ) {
    my $name = $host->{ 'host' }->{ 'name' } || 'UNKNOWN';
    my $hostgroup = $host->{ 'host' }->{ 'hostgroup' } || 'UNKNOWN';
    push( @{$hostgroups->{ $hostgroup }}, $name );
  }

  return $hostgroups;
}

sub prettyPrint {
  my( $header, @items ) = ( @_ );

  my( @output ) = sort( map { sprintf( '    %s', $_ ) } @items );
  if ( $header ) {
    unshift( @output, $header );
  }

  print join( "\n", @output ), "\n\n";
}

sub scriptPrint {
  my( @items ) = @_;
  print join( ' ', sort( @items ) ), ' ';
}

sub printHostgroups {
  my( $hostgroups, $script ) = ( @_ );

  my( @names ) = keys( %{$hostgroups} );

  if ( $script ) {
    scriptPrint( @names );
  }
  else {
    prettyPrint( "Hostgroups:\n", @names );
  }
}

sub printHostgroup {
  my( $hostgroup, $hostgroups, $script ) = ( @_ );

  # hack to skip cli options
  if ( $hostgroup =~ /^-/ ) {
    return;
  }

  my( @hosts );
  if ( defined( $hostgroups->{$hostgroup} ) ) {
    ( @hosts ) = @{$hostgroups->{$hostgroup}};
  }

  if ( @hosts ) {
    if ( $script ) {
      scriptPrint( @hosts );
    }
    else {
      prettyPrint( "Hosts in hostgroup '$hostgroup':\n", @hosts );
    }
  }
  else {
    warn( "No hosts found in hostgroup '$hostgroup'!\n" );
  }
}

sub patchHostgroup {
  my( $hostgroup, $hostgroups, $noop, $verbose, @packages ) = ( @_ );

  # build the list of hosts to patch
  my $hosts = $hostgroups->{$hostgroup};

  if ( defined( $hosts ) ) {
    my $patch_cmd = 'sudo aptitude -y -V upgrade ';

    if ( $noop ) {
        $patch_cmd = 'echo ' . $patch_cmd;
    }

    # if not given specified packages: don't auto-run
    if ( scalar( @packages ) ) {
      $patch_cmd .= join( ' ', @packages );
    }
    else {
      $patch_cmd =~ s/ -y//;
    }

    # loop rather than create one massive shell command
    for my $h ( sort( @{$hosts} ) ) {
  
      StatusMesg( "Patching $h ...");
      my $command = join( ' ', $SSH_CMD, $h, $patch_cmd );
  
      if ( $verbose ) {
        print "/bin/sh -c $command\n";
      }
  
      # execute the command
      system( $command );
      my $retval = $? >> 8;

      if ( $retval > 0 ) {
          warn( "'$command' exited with return value $retval!\n" );
      }
  
      EndProgress();
      horizontalRule();
    }
  }
  else {
    warn( "'$hostgroup' doesn't look like a valid hostgroup.\n" );
  }
}

# MAIN

# set up the cache
( -d $CACHE_ROOT ) or mkdir( $CACHE_ROOT );

my $cache = Cache::FileCache->new( { 'cache_root'         => $CACHE_ROOT,
                                     'namespace'          => $CACHE_NAMESPACE,
                                     'default_expires_in' => $CACHE_EXPIRY,
                                   } ) or die( "Unable to configure cache: $!$/" );

# parse command-line args
use Getopt::Complete (
  'complete!'       => undef,
  'help|h!'         => undef,
  'list|l!'         => undef,
  'script|s!'       => undef,
  'noop|dry-run|n!' => undef,
  'flush|f!'        => undef,
  'package|p:s@'    => undef,
  'exclude|x:s@'    => undef,
  'verbose|v!'      => undef,
  'version|V!'      => undef,
  '<>'              => sub {
    my( $command, $value, $option, $other_opts ) = @_;
    my $hostgroups = getHostgroups(
      cache    => $cache,
      flush    => 0,
      remote   => 'http://puppet.runkeeper.com/statics/hosts_and_hostgroups.json',
      fallback => '/Users/rk/.RK/hosts_and_hostgroups.json',
    );
    my( @completions ) = sort( keys( %{$hostgroups} ) );
    return \@completions;
  },
);

my $complete = $ARGS{'complete'};
my $flush    = $ARGS{'flush'};
my $help     = $ARGS{'help'};
my $list     = $ARGS{'list'};
my $noop     = $ARGS{'noop'};
my $script   = $ARGS{'script'};
my $verbose  = $ARGS{'verbose'};
my $version  = $ARGS{'version'};

my( @packages );
if ( defined( $ARGS{'package'} && ref( $ARGS{'package'} ) eq 'ARRAY' ) ) {
  ( @packages ) = @{$ARGS{'package'}};
}

my( @excludes );
if ( defined( $ARGS{'exclude'} && ref( $ARGS{'exclude'} ) eq 'ARRAY' ) ) {
  ( @excludes ) = @{$ARGS{'exclude'}};
}

my( @requested );
if ( defined( $ARGS{'<>'} ) ) {
  ( @requested ) = @{$ARGS{'<>'}};
}

if ( $help ) {
  usage;
}

if ( $version ) {
  print "$progname $VERSION\n";
  exit 0;
}

if ( $complete ) {
  generateCompletion();
  exit 0;
}

my $hostgroups = getHostgroups(
  cache    => $cache,
  flush    => $flush,
  remote   => $HOSTGROUPS_URL,
  fallback => $HOSTGROUPS_FILE,
);

if ( $flush ) {
    $cache->clear();
    print "Cache cleared.\n";
    exit 0;
}
elsif ( $list ) {
  if ( scalar( @requested ) ) {
    # print hosts in hostgroups
    while ( my $hostgroup = shift( @requested ) ) {
      printHostgroup( $hostgroup, $hostgroups, $script );
    }
  }
  else {
    # print available hostgroups
    printHostgroups( $hostgroups, $script );
  }
  exit 0;
}
else {
  scalar( @requested ) || usage();

  # do some work
  my( @evals );
  ClearTerm();
  while ( my $hostgroup = shift( @requested ) ) {
    my $patchcmd = patchHostgroup( $hostgroup, $hostgroups, $noop, $verbose, @packages );
  }
}
